/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * My API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://v-simkin-pc.tscrm.com/server/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration?: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Дані про пул застосунків
 * @export
 * @interface ApplicationPoolData
 */
export interface ApplicationPoolData {
    /**
     * Назва
     * @type {string}
     * @memberof ApplicationPoolData
     */
    name: string;
    /**
     * Стан
     * @type {string}
     * @memberof ApplicationPoolData
     */
    state: string;
    /**
     * Запущені процеси
     * @type {Array<WorkerProcessData>}
     * @memberof ApplicationPoolData
     */
    workerProcesses: Array<WorkerProcessData>;
}
/**
 * Параметри для виконання запиту SQL
 * @export
 * @interface SQLExecuteConfig
 */
export interface SQLExecuteConfig {
    /**
     * код запиту
     * @type {string}
     * @memberof SQLExecuteConfig
     */
    sql: string;
}
/**
 * Результат виконання SQL запиту
 * @export
 * @interface SQLQueryResult
 */
export interface SQLQueryResult {
    /**
     * Успішність виконання
     * @type {boolean}
     * @memberof SQLQueryResult
     */
    success: boolean;
    /**
     * Час виконання запиту (в мс)
     * @type {number}
     * @memberof SQLQueryResult
     */
    executeTime?: number;
    /**
     * Текст помилки
     * @type {string}
     * @memberof SQLQueryResult
     */
    errorMessage?: string;
    /**
     * Стек помилки
     * @type {string}
     * @memberof SQLQueryResult
     */
    errorStack?: string;
    /**
     * Запит
     * @type {string}
     * @memberof SQLQueryResult
     */
    sql?: string;
    /**
     * Колонки
     * @type {Array<string>}
     * @memberof SQLQueryResult
     */
    columns?: Array<string>;
    /**
     * Рядки з даними
     * @type {Array<Array<string>>}
     * @memberof SQLQueryResult
     */
    rows?: Array<Array<string>>;
    /**
     * Кількість зачеплених записів
     * @type {number}
     * @memberof SQLQueryResult
     */
    recordsAffected?: number;
    /**
     * Тип бази даних
     * @type {string}
     * @memberof SQLQueryResult
     */
    dbType?: string;
}
/**
 * 
 * @export
 * @interface StringStringKeyValuePair
 */
export interface StringStringKeyValuePair {
    /**
     * 
     * @type {string}
     * @memberof StringStringKeyValuePair
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof StringStringKeyValuePair
     */
    value?: string;
}
/**
 * Дані про застосунок розгорнутий в IIS
 * @export
 * @interface WebApp
 */
export interface WebApp {
    /**
     * Ідентифікатор сайту (генерується автоматично)
     * @type {string}
     * @memberof WebApp
     */
    id: string;
    /**
     * Сайт на якому розташований застосунок
     * @type {string}
     * @memberof WebApp
     */
    site: string;
    /**
     * URL застосунку
     * @type {string}
     * @memberof WebApp
     */
    path: string;
    /**
     * Шлях до розташування застосунку на диску
     * @type {string}
     * @memberof WebApp
     */
    physicalPath: string;
    /**
     * Назва пулу застосунків
     * @type {string}
     * @memberof WebApp
     */
    applicationPoolName: string;
    /**
     * Рядок підключення до БД
     * @type {string}
     * @memberof WebApp
     */
    dbConnectionString?: string;
    /**
     * Рядок підключення до Redis
     * @type {string}
     * @memberof WebApp
     */
    redisConnectionString?: string;
    sqldbType: string;
}
/**
 * Дані про процеси IIS
 * @export
 * @interface WorkerProcessData
 */
export interface WorkerProcessData {
    /**
     * Id
     * @type {number}
     * @memberof WorkerProcessData
     */
    processId: number;
    /**
     * Стан
     * @type {string}
     * @memberof WorkerProcessData
     */
    state: string;
    /**
     * Використана оперативна пам'ять, KB
     * @type {number}
     * @memberof WorkerProcessData
     */
    ram?: number;
    /**
     * % процесорного часу
     * @type {number}
     * @memberof WorkerProcessData
     */
    cpu?: number;
}
/**
 * ApplicationPoolApi - fetch parameter creator
 * @export
 */
export const ApplicationPoolApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Отримати дані про пул застосунків
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPools(options: any = {}): FetchArgs {
            const localVarPath = `/applicationpool`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Перезапустити пул застосунків
         * @param {string} name назва
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recycle(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling recycle.');
            }
            const localVarPath = `/applicationpool/{name}/recycle`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Запустити пул застосунків
         * @param {string} name назва
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        start(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling start.');
            }
            const localVarPath = `/applicationpool/{name}/start`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Зупинити пул застосунків
         * @param {string} name назва
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stop(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling stop.');
            }
            const localVarPath = `/applicationpool/{name}/stop`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationPoolApi - functional programming interface
 * @export
 */
export const ApplicationPoolApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Отримати дані про пул застосунків
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPools(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ApplicationPoolData>> {
            const localVarFetchArgs = ApplicationPoolApiFetchParamCreator(configuration).getApplicationPools(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Перезапустити пул застосунків
         * @param {string} name назва
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recycle(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApplicationPoolApiFetchParamCreator(configuration).recycle(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Запустити пул застосунків
         * @param {string} name назва
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        start(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApplicationPoolApiFetchParamCreator(configuration).start(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Зупинити пул застосунків
         * @param {string} name назва
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stop(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApplicationPoolApiFetchParamCreator(configuration).stop(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ApplicationPoolApi - factory interface
 * @export
 */
export const ApplicationPoolApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Отримати дані про пул застосунків
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPools(options?: any) {
            return ApplicationPoolApiFp(configuration).getApplicationPools(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Перезапустити пул застосунків
         * @param {string} name назва
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recycle(name: string, options?: any) {
            return ApplicationPoolApiFp(configuration).recycle(name, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Запустити пул застосунків
         * @param {string} name назва
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        start(name: string, options?: any) {
            return ApplicationPoolApiFp(configuration).start(name, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Зупинити пул застосунків
         * @param {string} name назва
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stop(name: string, options?: any) {
            return ApplicationPoolApiFp(configuration).stop(name, options)(fetch, basePath);
        },
    };
};

/**
 * ApplicationPoolApi - object-oriented interface
 * @export
 * @class ApplicationPoolApi
 * @extends {BaseAPI}
 */
export class ApplicationPoolApi extends BaseAPI {
    /**
     * 
     * @summary Отримати дані про пул застосунків
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPoolApi
     */
    public getApplicationPools(options?: any) {
        return ApplicationPoolApiFp(this.configuration).getApplicationPools(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Перезапустити пул застосунків
     * @param {string} name назва
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPoolApi
     */
    public recycle(name: string, options?: any) {
        return ApplicationPoolApiFp(this.configuration).recycle(name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Запустити пул застосунків
     * @param {string} name назва
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPoolApi
     */
    public start(name: string, options?: any) {
        return ApplicationPoolApiFp(this.configuration).start(name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Зупинити пул застосунків
     * @param {string} name назва
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPoolApi
     */
    public stop(name: string, options?: any) {
        return ApplicationPoolApiFp(this.configuration).stop(name, options)(this.fetch, this.basePath);
    }

}
/**
 * DBApi - fetch parameter creator
 * @export
 */
export const DBApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Виконати запит SQL до бази застосунку
         * @param {string} webAppId id застосунку
         * @param {SQLExecuteConfig} [body] параметри виконання
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute(webAppId: string, body?: SQLExecuteConfig, options: any = {}): FetchArgs {
            // verify required parameter 'webAppId' is not null or undefined
            if (webAppId === null || webAppId === undefined) {
                throw new RequiredError('webAppId','Required parameter webAppId was null or undefined when calling execute.');
            }
            const localVarPath = `/sql/{webAppId}/execute`
                .replace(`{${"webAppId"}}`, encodeURIComponent(String(webAppId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SQLExecuteConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DBApi - functional programming interface
 * @export
 */
export const DBApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Виконати запит SQL до бази застосунку
         * @param {string} webAppId id застосунку
         * @param {SQLExecuteConfig} [body] параметри виконання
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute(webAppId: string, body?: SQLExecuteConfig, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SQLQueryResult> {
            const localVarFetchArgs = DBApiFetchParamCreator(configuration).execute(webAppId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DBApi - factory interface
 * @export
 */
export const DBApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Виконати запит SQL до бази застосунку
         * @param {string} webAppId id застосунку
         * @param {SQLExecuteConfig} [body] параметри виконання
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execute(webAppId: string, body?: SQLExecuteConfig, options?: any) {
            return DBApiFp(configuration).execute(webAppId, body, options)(fetch, basePath);
        },
    };
};

/**
 * DBApi - object-oriented interface
 * @export
 * @class DBApi
 * @extends {BaseAPI}
 */
export class DBApi extends BaseAPI {
    /**
     * 
     * @summary Виконати запит SQL до бази застосунку
     * @param {string} webAppId id застосунку
     * @param {SQLExecuteConfig} [body] параметри виконання
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DBApi
     */
    public execute(webAppId: string, body?: SQLExecuteConfig, options?: any) {
        return DBApiFp(this.configuration).execute(webAppId, body, options)(this.fetch, this.basePath);
    }

}
/**
 * RedisApi - fetch parameter creator
 * @export
 */
export const RedisApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Очистити базу redis
         * @param {string} webAppId id застосунку
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flushDb(webAppId: string, options: any = {}): FetchArgs {
            // verify required parameter 'webAppId' is not null or undefined
            if (webAppId === null || webAppId === undefined) {
                throw new RequiredError('webAppId','Required parameter webAppId was null or undefined when calling flushDb.');
            }
            const localVarPath = `/redis/{webAppId}/flush/db`
                .replace(`{${"webAppId"}}`, encodeURIComponent(String(webAppId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Отримати всі дані з БД
         * @param {string} webAppId id застосунку
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(webAppId: string, options: any = {}): FetchArgs {
            // verify required parameter 'webAppId' is not null or undefined
            if (webAppId === null || webAppId === undefined) {
                throw new RequiredError('webAppId','Required parameter webAppId was null or undefined when calling getAll.');
            }
            const localVarPath = `/redis/{webAppId}`
                .replace(`{${"webAppId"}}`, encodeURIComponent(String(webAppId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Отримати значення за ключем
         * @param {string} webAppId id застосунку
         * @param {string} key ключ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByKey(webAppId: string, key: string, options: any = {}): FetchArgs {
            // verify required parameter 'webAppId' is not null or undefined
            if (webAppId === null || webAppId === undefined) {
                throw new RequiredError('webAppId','Required parameter webAppId was null or undefined when calling getByKey.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getByKey.');
            }
            const localVarPath = `/redis/{webAppId}/{key}`
                .replace(`{${"webAppId"}}`, encodeURIComponent(String(webAppId)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Встановити значення
         * @param {string} webAppId id застосунку
         * @param {string} key ключ
         * @param {string} [body] значення
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        set(webAppId: string, key: string, body?: string, options: any = {}): FetchArgs {
            // verify required parameter 'webAppId' is not null or undefined
            if (webAppId === null || webAppId === undefined) {
                throw new RequiredError('webAppId','Required parameter webAppId was null or undefined when calling set.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling set.');
            }
            const localVarPath = `/redis/{webAppId}/{key}`
                .replace(`{${"webAppId"}}`, encodeURIComponent(String(webAppId)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RedisApi - functional programming interface
 * @export
 */
export const RedisApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Очистити базу redis
         * @param {string} webAppId id застосунку
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flushDb(webAppId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RedisApiFetchParamCreator(configuration).flushDb(webAppId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Отримати всі дані з БД
         * @param {string} webAppId id застосунку
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(webAppId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<StringStringKeyValuePair>> {
            const localVarFetchArgs = RedisApiFetchParamCreator(configuration).getAll(webAppId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Отримати значення за ключем
         * @param {string} webAppId id застосунку
         * @param {string} key ключ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByKey(webAppId: string, key: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = RedisApiFetchParamCreator(configuration).getByKey(webAppId, key, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Встановити значення
         * @param {string} webAppId id застосунку
         * @param {string} key ключ
         * @param {string} [body] значення
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        set(webAppId: string, key: string, body?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = RedisApiFetchParamCreator(configuration).set(webAppId, key, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RedisApi - factory interface
 * @export
 */
export const RedisApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Очистити базу redis
         * @param {string} webAppId id застосунку
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flushDb(webAppId: string, options?: any) {
            return RedisApiFp(configuration).flushDb(webAppId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Отримати всі дані з БД
         * @param {string} webAppId id застосунку
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(webAppId: string, options?: any) {
            return RedisApiFp(configuration).getAll(webAppId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Отримати значення за ключем
         * @param {string} webAppId id застосунку
         * @param {string} key ключ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByKey(webAppId: string, key: string, options?: any) {
            return RedisApiFp(configuration).getByKey(webAppId, key, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Встановити значення
         * @param {string} webAppId id застосунку
         * @param {string} key ключ
         * @param {string} [body] значення
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        set(webAppId: string, key: string, body?: string, options?: any) {
            return RedisApiFp(configuration).set(webAppId, key, body, options)(fetch, basePath);
        },
    };
};

/**
 * RedisApi - object-oriented interface
 * @export
 * @class RedisApi
 * @extends {BaseAPI}
 */
export class RedisApi extends BaseAPI {
    /**
     * 
     * @summary Очистити базу redis
     * @param {string} webAppId id застосунку
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedisApi
     */
    public flushDb(webAppId: string, options?: any) {
        return RedisApiFp(this.configuration).flushDb(webAppId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Отримати всі дані з БД
     * @param {string} webAppId id застосунку
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedisApi
     */
    public getAll(webAppId: string, options?: any) {
        return RedisApiFp(this.configuration).getAll(webAppId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Отримати значення за ключем
     * @param {string} webAppId id застосунку
     * @param {string} key ключ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedisApi
     */
    public getByKey(webAppId: string, key: string, options?: any) {
        return RedisApiFp(this.configuration).getByKey(webAppId, key, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Встановити значення
     * @param {string} webAppId id застосунку
     * @param {string} key ключ
     * @param {string} [body] значення
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedisApi
     */
    public set(webAppId: string, key: string, body?: string, options?: any) {
        return RedisApiFp(this.configuration).set(webAppId, key, body, options)(this.fetch, this.basePath);
    }

}
/**
 * WebAppApi - fetch parameter creator
 * @export
 */
export const WebAppApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {boolean} [updateInCache] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(updateInCache?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/webapp`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (updateInCache !== undefined) {
                localVarQueryParameter['updateInCache'] = updateInCache;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebAppApi - functional programming interface
 * @export
 */
export const WebAppApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {boolean} [updateInCache] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(updateInCache?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<WebApp>> {
            const localVarFetchArgs = WebAppApiFetchParamCreator(configuration).get(updateInCache, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * WebAppApi - factory interface
 * @export
 */
export const WebAppApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {boolean} [updateInCache] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(updateInCache?: boolean, options?: any) {
            return WebAppApiFp(configuration).get(updateInCache, options)(fetch, basePath);
        },
    };
};

/**
 * WebAppApi - object-oriented interface
 * @export
 * @class WebAppApi
 * @extends {BaseAPI}
 */
export class WebAppApi extends BaseAPI {
    /**
     * 
     * @param {boolean} [updateInCache] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebAppApi
     */
    public get(updateInCache?: boolean, options?: any) {
        return WebAppApiFp(this.configuration).get(updateInCache, options)(this.fetch, this.basePath);
    }

}
